function Get-PII{
<# 

 .SYNOPSIS
  ---------------------------------------------------------------------------------------------

  SHOULD NOT BE RAN AS ADMIN (ELEVATED) IN ORDER TO DETECT UNSECURED PII

  ---------------------------------------------------------------------------------------------

  Function to report on files containing Personally Identifiable Information (PII)

 .DESCRIPTION

  Function produces an CSV report of files of certain extensions in certain folders, 
  that contain PII such as social security numbers and credit card card numbers. 

 .PARAMETER TargetFolder 
  Folder(s) to search in. 
  Examples: "c:\support" or "d:\sandbox" or "\\server11\share\sales" 

 .EXAMPLE 
  Get-PII

  This example produces a report on files on the users Desktop that contain PII, 
  and will output the csv file to the user's desktop labeled "Potential PII Report.csv"

 .EXAMPLE 
  Get-PII -TargetFolder "\\server11\share\sales" -OutputPath "C:\Potential PII Report.csv"

  This example produces a report on files in the folder "\\server11\share\sales" that contain PII, 
  and will output the csv file to "c:\Potential PII Report.csv"


 .LINK
  https://github.com/siraddison/posh

  ---------------------------------------------------------------------------------------------

  SHOULD NOT BE RAN AS ADMIN (ELEVATED) IN ORDER TO DETECT UNSECURED PII

  ---------------------------------------------------------------------------------------------

 .NOTES
  Function by Sir Addison
  v1.0 - 07/12/2020
  v2.0 - 10/01/2020 - Added the pattern to the output and a progress bar.
#>

    [CmdletBinding(DefaultParameterSetName=’FolderPath’)]
    [Alias('GPII')]
    Param
    (
        # The input for this parameter is the Computer hostname to which you want to collect Auto Run data.
        [SupportsWildCards()]

        [Parameter(Mandatory=$false,
                   ValueFromPipelineByPropertyName=$true,
                   Position=0,
                   ParameterSetName=’FolderPath’)]
                                          
        $TargetFolder = "$env:USERPROFILE\Desktop",

        [Parameter(Mandatory=$false,
                   Position=1)]
        # Path on the computer where you would like the output file.
        $OutputPath = "$env:USERPROFILE\Desktop\Potential PII Report $((Get-Date).ToString("yyyyMMdd_HHmmss")).csv"                
    )

    Write-Host
    Write-Host "Pattern - [0-9]{3}[-| ][0-9]{2}[-| ][0-9]{4}" -ForegroundColor DarkYellow
    Write-Host "Purpose - This pattern searches for SSNs in the 'XXX-XX-XXXX' and 'XXX XX XXXX' format" -ForegroundColor DarkYellow
    $pattern1 = '[0-9]{3}[-| ][0-9]{2}[-| ][0-9]{4}'
    Write-Host
    #This pattern searches for SSNs without dashes or spaces, i.e. "XXXXXXXXX"
    #$pattern2 = '[0-9]{9}'

    #This pattern is for credit card numbers from Visa, Discover, and MasterCard    
    #$pattern3 = '[456][0-9]{3}[-| ][0-9]{4}[-| ][0-9]{4}[-| ][0-9]{4}'

    #This variable is for searching credit card numbers from American Express
    #$pattern4= '3[47][0-9]{13}","3[47][0-9]{2}[-| ][0-9]{6}[-| ][0-9]{5}'

    Write-Host "Pattern - 'Privacy Act'" -ForegroundColor DarkYellow
    Write-Host "Purpose - 'Privacy Act' pattern searches for 'Privacy Act' as a key word" -ForegroundColor DarkYellow
    $pattern5 = 'Privacy Act'
    Write-Host

    Write-Host "Pattern - 'SSN'" -ForegroundColor DarkYellow
    Write-Host "Purpose - 'SSN' pattern searches for 'SSN' as a key word" -ForegroundColor DarkYellow
    $pattern6 = 'SSN'
    Write-Host

    Write-Host "Pattern - 'Social Security Number'" -ForegroundColor DarkYellow
    Write-Host "Purpose - 'Social Security Number' pattern searches for 'Social Security Number' as a key word" -ForegroundColor DarkYellow
    $pattern7 = 'Social Security Number'
    Write-Host

    #$pattern8 = 'credit card'

    Write-Host "Pattern - 'Sensitive'" -ForegroundColor DarkYellow
    Write-Host "Purpose - 'Sensitive' pattern searches for 'Sensitive' as a key word" -ForegroundColor DarkYellow
    $pattern9 = 'Sensitive'
    Write-Host

    Write-Host "Pattern - 'Confidential'" -ForegroundColor DarkYellow
    Write-Host "Purpose - 'Confidential' pattern searches for 'Confidential' as a key word" -ForegroundColor DarkYellow
    $pattern10 = 'Confidential'
    Write-Host

    $erroractionpref = "SilentlyContinue"
   
    Write-Host "Gathering files" -ForegroundColor Yellow
    try{      
        
        $Obj=@()
        $Obj+= @(
            Get-ChildItem -Recurse -file -force -path $TargetFolder -Exclude *.*db, *.jpg, *.xps, *.msg, *.bmp, *.xfdl, *.wmv -ErrorAction $erroractionpref #|
        )
    }
    catch{$_}
    Write-Host "Counting and preparing files to be scanned for Personally Identifiable Information" -ForegroundColor Yellow
    $i = 0
    $DocumentsToBeScanned = $obj.count
    Write-Host "$DocumentsToBeScanned files gathered... Scanning in progress..." -ForegroundColor Cyan
    $FinalDocument = @()
    $FinalDocument += @(        
        Foreach($File in $Obj){
            Write-Progress -Activity "Scanning $File for PII" -Status "Progress: File $i of $($DocumentsToBeScanned)" -PercentComplete ($i*100/$DocumentsToBeScanned)
            Select-String $File -Pattern $pattern1, $pattern5, $pattern6, $pattern7, $pattern9, $pattern10 -ErrorAction $erroractionpref
            $i++      
        }
    )
    $FinalDocument | Select-Object -Property Pattern, Filename, Path | Export-Csv $OutputPath -NoTypeInformation -append
    Write-Host "Scanning Complete... Final product has been stored at $OutputPath" -ForegroundColor Green
} 
