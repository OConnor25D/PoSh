function Find-WirelessAdapters
{
<#
.SYNOPSIS
   Finds installed applications with the ability to filter based on a predefined list.

.DESCRIPTION
   See Above.

.EXAMPLE
   Find-WirelessAdapters -ComputerName <Computer Name> 

   This example will identify Wireless Adapters on a single computer. Note: There will be an output file will be dumped to the desktop by default and called InterfaceData.csv.

.EXAMPLE
   Find-WirelessAdapters -ComputerName <Computer Name, Computer Name> -OutputPath "c:\InterfaceData.csv"

   This example will identify Wireless Adapters on multiple computers and will output the csv file to "c:\InterfaceData.csv" defined by the OutputPath parameter above.

.EXAMPLE
   Find-WirelessAdapters -ComputerName $(Get-Content C:\computers.txt) 

   This example will identify Wireless Adapters on multiple computers that are imported from a file.

.EXAMPLE
   Find-WirelessAdapters -ComputerName $(Get-Content C:\computers.txt) -Options <Predefined List>

   This example will identify Wireless Adapters on a multiple computers that are imported from a file, and offer options based on a pre-defined list that is chosen in the -Options parameter dropdown menu. Computers that are found to have Wireless NICs that are Enabled, or Enabled and Connected, depending on the selected option in the pre-defined list will be output to the desktop by default and will be called InterfaceData.csv.

.EXAMPLE
   Find-WirelessAdapters -OUPath <"OU=Computers,DC=Domain,DC=Com"> -Options <Predefined List> 

   This example will identify installed Applications on any computers found within the distinguished name path that is defined using the -OUPath parameter, and offer options based on a pre-defined list that is chosen in the -Options parameter dropdown menu. Copmuters that are found to have Wireless NICs that are Enabled, or Enabled and Connected, depending on the selected option in the pre-defined list will be output to the desktop by default and will be called InterfaceData.csv.

.LINK
   https://github.com/siraddison/posh

.NOTES
   Modified 13 July 2020
   Sir Addison

#>

    [CmdletBinding(DefaultParameterSetName=’ComputerName’)]
    [Alias('FWA')]
    Param
    (
        # The input for this parameter is the Computer hostname to which you want to collect Wireless NIC data.
        [Parameter(Mandatory=$false,
                   ValueFromPipelineByPropertyName=$true,
                   Position=0,
                   ParameterSetName=’ComputerName’)]            
        [array]$ComputerName = $env:COMPUTERNAME,

        [Parameter(Mandatory=$true,                   Position=0,
                   ParameterSetName=’OUPath’)]
        # Distinguished Name path of which Organizational Unit you would like to find computers in.
        $OUPath,

        [Parameter(Mandatory=$false,                   Position=1)]
        # Path on the computer where you would like the output file.
        $OutputPath = "$env:USERPROFILE\Desktop\InterfaceData.csv"        
)

DynamicParam{
    
    $Attributes = New-Object System.Management.Automation.ParameterAttribute
    $Attributes.ParameterSetName = '__AllParameterSets'
    $Attributes.Mandatory = $false
    $AttributeCollection = New-Object -Type System.Collections.ObjectModel.Collection[System.Attribute]
    $AttributeCollection.Add($Attributes)
    
    $Values ="WifiEnabled","WifiEnabledAndConnected","WifiNICOnly","AllInterfaces"
    
    $ValidateSet = New-Object System.Management.Automation.ValidateSetAttribute($Values)
    $AttributeCollection.Add($ValidateSet)

    $DynParam = New-Object -Type System.Management.Automation.RuntimeDefinedParameter("Options", [string], $attributeCollection)

    $ParamDictionary = New-Object -Type System.Management.Automation.RuntimeDefinedParameterDictionary
    $ParamDictionary.Add("Options", $DynParam)

    return $ParamDictionary

    }

    Process{

    $Options = $PSBoundParameters.Options
    
            $i = 0       
           
            If($OUPath){$ComputerName = (Get-ADComputer -Filter * -SearchBase $OUPath).Name}  
           
            $NICInfo = @()   
            $JobInfo = @()     
            foreach($comp in $ComputerName){   
           
            try{              
            $i++                
            Write-Progress -Activity "Starting Remote Job on $comp" -Status "Progress:" -PercentComplete ($i/$ComputerName.count*100) 
           
            if($Options -eq 'WifiEnabled'){                
                $JobInfo += Invoke-command -ComputerName $comp -AsJob -ScriptBlock{Get-NetAdapter | where PhysicalMediaType -like "*802.1*" | where AdminStatus -eq "Up"}
            }                          
            elseif($Options -eq 'WifiEnabledAndConnected'){    
                $JobInfo += Invoke-command -ComputerName $comp -AsJob -ScriptBlock{Get-NetAdapter | where PhysicalMediaType -like "*802.1*" | where AdminStatus -eq "Up" | where MediaConnectionState -eq "Connected"}   
            }                   
            elseif($Options -eq 'WifiNICOnly'){      
                $JobInfo += Invoke-command -ComputerName $comp -AsJob -ScriptBlock{Get-NetAdapter | where PhysicalMediaType -like "*802.1*"}               
            }       
            elseif($Options -eq 'AllInterfaces'){    
                $JobInfo += Invoke-command -ComputerName $comp -AsJob -ScriptBlock{Get-NetAdapter}   
            }   
        } 
    catch{}
    }
   
    Write-Progress -Activity "Job Disbursement Complete" -Completed      
    $j = 0          
    $KilledJobs = @()       
   
    <#
    Collect all of the jobs to see which ones are still running and present a count.      
    For each job that it finds running, it checks the start time of the job.  If the job has been running for more than 60 minutes, it kills job.          
    Each time it goes through the loop, it goes to sleep for 20 seconds before checking everything all over again.          
    Once there no more running jobs, it moves on.
    #>      
   
    Do{        
    Write-Host "Still have" $(Get-Job | where State -eq "Running").count "job(s) running.."    
    If($(Get-Job | where State -eq "Running")){ 
        $RunninngJobs = Get-Job | where State -eq "Running"             
       
        Foreach($Job in $RunninngJobs){             
       
            If($(Get-Date ($Job).PSBeginTime).AddMinutes("60") -lt $(Get-Date)){     
           
            $Job | Stop-Job                 
            $Job | Remove-Job                
            $KilledJobs += $Job              
            $Job = $null                     
            }                                
        }              
    }            
   
    Start-Sleep -Seconds 20    
   
    }           
    Until((get-job).State -notcontains "Running")  
   
    Write-Host            
    Write-Host "Jobs completed Running!" -ForegroundColor Green  
    Write-Host "Collecting data from the jobs now.."          
    Write-Host       
    Write-Host "The data can be retrieved here:" $OutputPath     
   
    Foreach($Job in $JobInfo){                     
   
    $JobStatus = Get-Job $Job.ID              
   
        If($JobStatus.State -eq "Completed"){               
        $NICInfo += Receive-Job $Job.ID     
        $Job.Location | Out-File $($OutputPathRoot + "\Find-WirelessAdapters_CompletedJobs.txt") -Append             
        Remove-Job $Job.ID                               
        }              
       
       Elseif($JobStatus.State -eq "Failed"){ 
       $OutputPathRoot = $($OutputPath.split("\")[0..$($($OutputPath.split("\")).count - 2)]  -Join "\")    
       $Job.Location | Out-File $($OutputPathRoot + "\Find-WirelessAdapters_FailedJobs.txt") -Append             
       Remove-Job $Job.ID                              
       }           
       
    $Job = $null     
    }         
   
    ForEach($Job in $KilledJobs){       
    $OutputPathRoot = $($OutputPath.split("\")[0..$($($OutputPath.split("\")).count - 2)]  -Join "\")  
    $Job.Location | Out-File $($OutputPathRoot + "\Find-WirelessAdapters_FailedJobs.txt") -Append        
    }
   
    Write-Host "Failed, Killed, and Completed jobs can be retrieved here:" $OutputPathRoot           
    $NICInfo | export-csv $OutputPath -NoTypeInformation   
    }  
}
